# 파티

import heapq
import sys
input = sys.stdin.readline
INF = int(1e9)

n , m, start = map(int, input().split()) # 마을(노드)의 갯수, 도로(간선)의 갯수, X를 입력
graph = [[] for _ in range(n+1)] 
distance_start = [INF] * (n+1)

# 출발 마을, 도착 마을, 걸리는 시간 순으로 입력
for _ in range(m):
    a, b, c = map(int, input().split())
    graph[a].append((b,c))

# 다익스트라 알고리즘 함수로 구현
def dijkstra(start, distance):
    q = []
    distance[start] = 0
    heapq.heappush(q, (0,start))
    while q:
        dist, now = heapq.heappop(q)
        if distance[now] < dist:
            continue
        for i in graph[now]:
            cost = dist + i[1]
            if cost < distance[i[0]]:
                distance[i[0]] = cost
                heapq.heappush(q, (cost, i[0]))

dijkstra(start, distance_start) # x를 출발로 하여 최단거리 테이블 갱신

max_time = 0 # 최대 시간

for i in range(1, n+1): # x를 제외한 나머지 마일에서 x까지의 거리를 구
    if i == start:
        continue
    distance = [INF]*(n+1)
    dijkstra(i, distance)
    if max_time < (distance_start[i]+distance[start]):
        max_time = distance_start[i]+distance[start]

print(max_time)
