# 최단 경로

import heapq
import sys
input = sys.stdin.readline
INF = int(1e9)

v, e = map(int, input().split()) # 노드의 갯수 v, 간선의 갯수 e 입력
k = int(input()) # 시작 노드 k 입력
graph = [[] for _ in range(v+1)] 
distance = [INF] * (v+1)

for i in range(e): # 간선의 갯수만큼 세 개의 정수를 입력 --> 출발, 도착, 가중치 순
    a, b, w = map(int, input().split())
    graph[a].append((b,w))

def dijkstra(start):
    q =[]
    heapq.heappush(q, (0,start))
    distance[start] = 0
    while q:
        dist, now = heapq.heappop(q)
        if distance[now] < dist:
            continue
        for i in graph[now]:
            cost = dist + i[1]
            if cost < distance[i[0]]:
                distance[i[0]] = cost
                heapq.heappush(q, (cost, i[0]))

# 시작 노드에서 각 노드까지의 최단 거리를 줄마다 출력, 경로가 없다면 INF로 출력
dijkstra(k)

for i in range(1, v+1):
    if distance[i] == INF:
        print("INF")
    else:
        print(distance[i])
